- name: Disable current Node.js module
  ansible.builtin.command: dnf module disable nodejs -y
  become: true

- name: Enable Node.js 20 module
  ansible.builtin.command: dnf module enable nodejs:20 -y
  become: true

- name: Install Node.js and MySQL client
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - nodejs
    - mysql
  become: true

- name: Create 'expense' user
  ansible.builtin.user:
    name: expense
    state: present

#Optional: Uncomment these if not handled in the common role
- name: Create app directory
  ansible.builtin.file:
    path: /app
    state: directory
    owner: expense
    group: expense
    mode: '0755'

- name: Download backend code
  ansible.builtin.get_url:
    url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip

- name: Unzip backend code
  ansible.builtin.unarchive:
    src: /tmp/backend.zip
    dest: /app
    remote_src: yes

- name: Install backend Node.js dependencies
  community.general.npm:
    path: /app
  tags:
    - deployment

- name: Copy backend systemd service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
  #notify: Restart backend service

- name: Install required Python packages
  ansible.builtin.pip:
    name: "{{ item }}"
    executable: pip3.9
  loop:
    - cryptography
    - PyMySQL

- name: Import MySQL schema
  community.mysql.mysql_db:
    state: import
    name: all
    login_user: "{{ MYSQL_USER }}"
    login_password: "{{ MYSQL_PASSWORD }}"
    login_host: "{{ MYSQL_HOST }}"
    target: /app/schema/backend.sql

- name: Reload systemd and restart backend service
  ansible.builtin.systemd:
    name: backend
    enabled: true
    state: restarted
    daemon_reload: true
  tags:
    - deployment

# Handler (optional, for more modular roles/playbooks)
# handlers:
#   - name: Restart backend service
#     ansible.builtin.systemd:
#       name: backend
#       state: restarted
#       daemon_reload: true
